apiVersion: batch/v1
kind: Job
metadata:
  name: minio-bucket-init-triton
  namespace: minio
  labels:
    app.kubernetes.io/name: minio-bucket-init-triton
    app.kubernetes.io/part-of: triton-demo
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio-bucket-init-triton
        app.kubernetes.io/part-of: triton-demo
    spec:
      serviceAccountName: minio-admin
      containers:
      - name: bucket-init
        image: minio/mc:latest
        command:
        - /bin/bash
        - -c
        args:
        - |
          echo "üöÄ Initialisation des buckets S3 pour Triton Demo"
          echo "================================================"
          
          # Configuration MinIO
          mc alias set myminio http://minio-api:9000 minioadmin minioadmin
          
          # Cr√©er le bucket data s√©par√©
          echo "üì¶ Cr√©ation du bucket triton-data..."
          mc mb myminio/triton-data --ignore-existing
          
          # Configurer les politiques d'acc√®s
          echo "üîê Configuration des politiques d'acc√®s..."
          mc policy set download myminio/triton-data
          
          # Cr√©er la structure de dossiers pour Iris
          echo "üìÅ Cr√©ation de la structure de dossiers..."
          echo "Iris dataset structure" > iris-data-info.txt
          
          mc cp iris-data-info.txt myminio/triton-data/iris-data/
          
          echo "‚ÑπÔ∏è Note: Le bucket models utilise la data connection 'Triton Demo - S3 Connection' existante"
          
          # Lister les buckets
          echo "üìã Buckets cr√©√©s:"
          mc ls myminio/
          
          echo "‚úÖ Initialisation termin√©e avec succ√®s!"
        env:
        - name: MINIO_ENDPOINT
          value: "http://minio-api:9000"
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
      restartPolicy: OnFailure
      backoffLimit: 3 