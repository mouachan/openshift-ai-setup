apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  name: triton-workbench
  namespace: triton-demo
  labels:
    app.kubernetes.io/name: triton-workbench
    app.kubernetes.io/component: workbench
    app.kubernetes.io/part-of: openshift-ai-demo
    app.kubernetes.io/managed-by: gitops
    demo.openshift.ai/type: triton-inference
    opendatahub.io/dashboard: "true"
    opendatahub.io/odh-managed: "true"
  annotations:
    openshift.io/display-name: "Triton Demo - Standard Data Science Workbench"
    openshift.io/description: "Workbench Jupyter avec image Standard Data Science Red Hat"
    notebooks.opendatahub.io/inject-oauth: "true"
    opendatahub.io/username: "demo-user"
    opendatahub.io/accelerator-name: ""
spec:
  template:
    spec:
      serviceAccountName: triton-workbench-sa
      containers:
      - name: triton-workbench
        # Image Standard Data Science officielle Red Hat
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2025.1
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "8Gi"
        env:
        - name: NOTEBOOK_ARGS
          value: |
            --ServerApp.port=8888
            --ServerApp.token=''
            --ServerApp.password=''
            --ServerApp.base_url=/notebook/triton-demo/triton-workbench
            --ServerApp.quit_button=False
        - name: JUPYTER_IMAGE
          value: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2025.1
        - name: ELYRA_ENABLE_SCRIPT_EXECUTION
          value: "True"
        - name: ELYRA_METADATA_STORE_CLASS
          value: "elyra.metadata.file.FileMetadataStore"
        - name: ELYRA_RUNTIME_ENV
          value: "kubeflow_pipelines"
        - name: KF_PIPELINES_ENDPOINT
          value: "https://ds-pipeline-triton-demo-pipelines-triton-demo.apps.cluster.local"
        - name: KF_PIPELINES_UI_ENDPOINT
          value: "https://ds-pipeline-ui-triton-demo-pipelines-triton-demo.apps.cluster.local"
        - name: MODEL_REGISTRY_URL
          value: "http://model-registry-service.model-registry.svc.cluster.local:8080"
        - name: MODEL_REGISTRY_DATABASE_URL
          value: "mysql://root:password@mysql.model-registry.svc.cluster.local:3306/model_registry"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mlpipeline-minio-artifact
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlpipeline-minio-artifact
              key: secretkey
        - name: AWS_S3_ENDPOINT
          value: "minio-triton-demo-pipelines-triton-demo.apps.cluster.local"
        - name: AWS_S3_BUCKET
          value: "mlpipeline"
        ports:
        - name: notebook-port
          containerPort: 8888
          protocol: TCP
        volumeMounts:
        - name: triton-workbench-storage
          mountPath: /opt/app-root/src
        - name: shm
          mountPath: /dev/shm
        command:
        - /bin/bash
        - -c
        args:
        - |
          # Installation des packages suppl√©mentaires pour la d√©mo Triton
          pip install --quiet --no-cache-dir \
            tritonclient[http] \
            scikit-learn \
            tensorflow \
            matplotlib \
            seaborn \
            git
          
          # Configuration Elyra
          mkdir -p /opt/app-root/src/.local/share/jupyter/metadata/runtimes
          
          # Clonage de la d√©mo Triton depuis GitHub
          cd /opt/app-root/src
          if [ ! -d "triton-demo" ]; then
            echo "üì• Clonage de la d√©mo Triton depuis GitHub..."
            git clone https://github.com/mouachan/openshift-ai-setup.git temp-repo
            cp -r temp-repo/demos/triton-example triton-demo
            rm -rf temp-repo
            echo "‚úÖ D√©mo Triton clon√©e avec succ√®s"
          else
            echo "üìÅ D√©mo Triton d√©j√† pr√©sente"
          fi
          
          # Configuration des permissions
          chmod -R 755 /opt/app-root/src/triton-demo
          
          # D√©marrage de Jupyter avec Elyra
          start-notebook.sh ${NOTEBOOK_ARGS}
        livenessProbe:
          httpGet:
            path: /notebook/triton-demo/triton-workbench/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /notebook/triton-demo/triton-workbench/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: triton-workbench-storage
        persistentVolumeClaim:
          claimName: triton-workbench-pvc
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi 