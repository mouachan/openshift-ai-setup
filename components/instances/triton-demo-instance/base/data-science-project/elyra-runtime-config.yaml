apiVersion: v1
kind: ConfigMap
metadata:
  name: elyra-runtime-config
  namespace: triton-demo
  labels:
    app.kubernetes.io/name: elyra-runtime-config
    app.kubernetes.io/part-of: triton-demo
data:
  # Script d'initialisation du runtime
  init-runtime.py: |
    #!/usr/bin/env python3
    """
    Script pour configurer automatiquement le runtime Elyra
    """
    import os
    import json
    import subprocess
    import time
    from pathlib import Path

    def main():
        print("üîß Configuration automatique du runtime Elyra...")
        
        # Configuration du runtime
        runtime_config = {
            "schema_name": "kfp",
            "metadata": {
                "display_name": "Data Science Pipelines",
                "description": "Runtime pour les pipelines de data science sur OpenShift AI",
                "tags": ["kubeflow", "pipelines", "openshift"]
            },
            "api_endpoint": "https://ds-pipeline-triton-demo-pipelines-triton-demo.apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com",
            "user_namespace": "triton-demo",
            "api_username": "",
            "api_password": "",
            "engine": "Argo",
            "cos_endpoint": "http://minio-api.minio.svc:9000",
            "cos_bucket": "triton-data",
            "cos_username": "minioadmin",
            "cos_password": "minioadmin",
            "cos_auth_type": "USER_CREDENTIALS",
            "tags": ["kubeflow", "pipelines", "openshift"]
        }
        
        # Sauvegarder la configuration temporairement
        config_file = "/tmp/runtime-config.json"
        with open(config_file, 'w') as f:
            json.dump(runtime_config, f, indent=2)
        
        print(f"üìÑ Configuration sauvegard√©e: {config_file}")
        
        # Attendre que Elyra soit pr√™t
        print("‚è≥ Attente qu'Elyra soit pr√™t...")
        time.sleep(10)
        
        # Cr√©er le runtime via elyra-metadata
        try:
            print("üöÄ Cr√©ation du runtime via elyra-metadata...")
            result = subprocess.run([
                "elyra-metadata", "install", "runtimes", "--schema_name=kfp", 
                "--name=Data Science Pipelines", "--display_name=Data Science Pipelines",
                f"--api_endpoint={runtime_config['api_endpoint']}",
                f"--user_namespace={runtime_config['user_namespace']}",
                f"--engine={runtime_config['engine']}",
                f"--cos_endpoint={runtime_config['cos_endpoint']}",
                f"--cos_bucket={runtime_config['cos_bucket']}",
                f"--cos_username={runtime_config['cos_username']}",
                f"--cos_password={runtime_config['cos_password']}",
                f"--cos_auth_type={runtime_config['cos_auth_type']}"
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ Runtime cr√©√© avec succ√®s via elyra-metadata")
            else:
                print(f"‚ö†Ô∏è Erreur lors de la cr√©ation: {result.stderr}")
                # Essayer une approche alternative
                print("üîÑ Tentative avec approche alternative...")
                create_runtime_alternative(runtime_config)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur avec elyra-metadata: {e}")
            create_runtime_alternative(runtime_config)
        
        # V√©rifier la configuration
        try:
            result = subprocess.run([
                "elyra-metadata", "list", "runtimes", "--json"
            ], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print("‚úÖ Configuration v√©rifi√©e avec succ√®s")
                print(result.stdout)
            else:
                print("‚ö†Ô∏è Impossible de v√©rifier la configuration")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la v√©rification: {e}")

    def create_runtime_alternative(runtime_config):
        """Approche alternative en cr√©ant directement le fichier de configuration"""
        print("üìÅ Cr√©ation directe du fichier de configuration...")
        
        # Chemin vers la configuration Elyra
        elyra_config_dir = Path.home() / ".local" / "share" / "jupyter" / "metadata" / "runtimes"
        elyra_config_dir.mkdir(parents=True, exist_ok=True)
        
        # Cr√©er le fichier de configuration
        runtime_file = elyra_config_dir / "kfp" / "Data Science Pipelines.json"
        runtime_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(runtime_file, 'w') as f:
            json.dump(runtime_config, f, indent=2)
        
        print(f"‚úÖ Runtime configur√© directement: {runtime_file}")
        print("üîó Endpoint: https://ds-pipeline-triton-demo-pipelines-triton-demo.apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com")
        print("üì¶ Bucket S3: triton-data")
        print("üè∑Ô∏è Nom du runtime: Data Science Pipelines")

    if __name__ == "__main__":
        main()

  # Configuration Elyra avanc√©e
  jupyter_elyra_config.py: |
    # Configuration Elyra pour les pipelines
    c.ElyraApp.enable_pipeline_editing = True
    c.ElyraApp.runtime_env = 'kubeflow_pipelines'
    
    # Configuration des data connections
    c.ElyraApp.data_connections = {
        'triton-data-connection': {
            'type': 's3',
            'endpoint': 'http://minio-api.minio.svc:9000',
            'access_key': 'minioadmin',
            'secret_key': 'minioadmin',
            'bucket': 'triton-data'
        }
    } 