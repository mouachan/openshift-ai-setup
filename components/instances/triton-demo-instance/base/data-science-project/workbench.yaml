apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  name: triton-workbench
  namespace: triton-demo
  labels:
    app.kubernetes.io/name: triton-workbench
    app.kubernetes.io/component: workbench
    app.kubernetes.io/part-of: openshift-ai-demo
    app.kubernetes.io/managed-by: gitops
    demo.openshift.ai/type: triton-inference
    opendatahub.io/dashboard: "true"
    opendatahub.io/odh-managed: "true"
  annotations:
    openshift.io/display-name: "Triton Demo - Data Science Workbench"
    openshift.io/description: "Workbench Jupyter pour d√©veloppement avec image standard data science"
    notebooks.opendatahub.io/inject-oauth: "true"
    notebooks.opendatahub.io/oauth-logout-url: "https://rhods-dashboard-redhat-ods-applications.apps.cluster.local/projects/triton-demo"
    opendatahub.io/username: "demo-user"
    opendatahub.io/accelerator-name: ""
spec:
  template:
    spec:
      # Affinity pour optimiser le placement
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: In
                values:
                - ""
      
      # Configuration des conteneurs
      containers:
      - name: triton-workbench
        # Image standard data science d'OpenShift AI
        image: registry.redhat.io/ubi8/python-39:latest
        imagePullPolicy: Always
        
        # Configuration des ressources
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "8Gi"
        
        # Variables d'environnement pour l'int√©gration
        env:
        - name: NOTEBOOK_ARGS
          value: |
            --ServerApp.port=8888
            --ServerApp.token=''
            --ServerApp.password=''
            --ServerApp.base_url=/notebook/triton-demo/triton-workbench
            --ServerApp.quit_button=False
            --ServerApp.tornado_settings={"user":"demo-user","hub_host":"https://rhods-dashboard-redhat-ods-applications.apps.cluster.local","hub_prefix":"/projects/triton-demo"}
        - name: JUPYTER_IMAGE
          value: registry.redhat.io/ubi8/python-39:latest
        
        # Configuration Elyra pour les pipelines
        - name: ELYRA_ENABLE_SCRIPT_EXECUTION
          value: "True"
        - name: ELYRA_METADATA_STORE_CLASS
          value: "elyra.metadata.file.FileMetadataStore"
        - name: ELYRA_RUNTIME_ENV
          value: "kubeflow_pipelines"
        
        # Configuration Kubeflow
        - name: KF_PIPELINES_ENDPOINT
          value: "https://ds-pipeline-triton-demo-pipelines-triton-demo.apps.cluster.local"
        - name: KF_PIPELINES_UI_ENDPOINT
          value: "https://ds-pipeline-ui-triton-demo-pipelines-triton-demo.apps.cluster.local"
        
        # Configuration Model Registry
        - name: MODEL_REGISTRY_URL
          value: "http://model-registry-service.rhoai-model-registries.svc.cluster.local:8080"
        - name: MODEL_REGISTRY_DATABASE_URL
          value: "mysql://model_registry:password@mysql.db-ai.svc.cluster.local:3306/model_registry"
        
        # Configuration S3/MinIO externe
        - name: AWS_ACCESS_KEY_ID
          value: "minio"
        - name: AWS_SECRET_ACCESS_KEY
          value: "minio123"
        - name: AWS_S3_ENDPOINT
          value: "minio-api.minio.svc.cluster.local:9000"
        - name: AWS_S3_BUCKET
          value: "model-registry-bucket"
        
        # Ports expos√©s
        ports:
        - name: notebook-port
          containerPort: 8888
          protocol: TCP
        
        # Volume mounts pour la persistance
        volumeMounts:
        - name: triton-workbench-pvc
          mountPath: /opt/app-root/src
        - name: shm
          mountPath: /dev/shm
        
        # Configuration de s√©curit√©
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000910000
          seccompProfile:
            type: RuntimeDefault
        
        # Commande de d√©marrage
        command:
        - /bin/bash
        - -c
        args:
        - |
          # Installation des packages requis
          pip install --quiet --no-cache-dir \
            elyra[kfp-tekton] \
            kfp>=2.0.0 \
            kubeflow-katib \
            model-registry \
            tritonclient[http] \
            scikit-learn \
            tensorflow \
            matplotlib \
            seaborn \
            git
          
          # Configuration Elyra
          mkdir -p /opt/app-root/src/.local/share/jupyter/metadata/runtimes
          
          # Clonage de la d√©mo Triton depuis GitHub
          cd /opt/app-root/src
          if [ ! -d "triton-demo" ]; then
            echo "üì• Clonage de la d√©mo Triton depuis GitHub..."
            git clone https://github.com/mouachan/openshift-ai-setup.git temp-repo
            cp -r temp-repo/demos/triton-example triton-demo
            rm -rf temp-repo
            echo "‚úÖ D√©mo Triton clon√©e avec succ√®s"
          else
            echo "üìÅ D√©mo Triton d√©j√† pr√©sente"
          fi
          
          # Configuration des permissions
          chmod -R 755 /opt/app-root/src/triton-demo
          
          # D√©marrage de Jupyter avec Elyra
          start-notebook.sh ${NOTEBOOK_ARGS}
        
        # Probes de sant√©
        livenessProbe:
          httpGet:
            path: /notebook/triton-demo/triton-workbench/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /notebook/triton-demo/triton-workbench/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      
      # Configuration des volumes
      volumes:
      - name: triton-workbench-pvc
        persistentVolumeClaim:
          claimName: triton-workbench-pvc
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi
      
      # Service Account pour l'acc√®s aux API K8s
      serviceAccountName: triton-workbench-sa
      
      # Configuration de s√©curit√©
      securityContext:
        fsGroup: 1000910000
        supplementalGroups:
        - 1000910000
