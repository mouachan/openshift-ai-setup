apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  name: triton-workbench
  namespace: triton-demo
  labels:
    app: triton-workbench
    opendatahub.io/dashboard: "true"
    opendatahub.io/odh-managed: "true"
    opendatahub.io/user: mouachan
  annotations:
    notebooks.opendatahub.io/inject-oauth: "true"
    opendatahub.io/image-display-name: "Standard Data Science"
    notebooks.opendatahub.io/oauth-logout-url: "https://rhods-dashboard-redhat-ods-applications.apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com/projects/triton-demo?notebookLogout=triton-workbench"
    opendatahub.io/accelerator-name: ""
    openshift.io/description: "Workbench Jupyter pour d√©veloppement avec image standard data science"
    openshift.io/display-name: "Triton Demo - Data Science Workbench"
    notebooks.opendatahub.io/last-image-version-git-commit-selection: "840a528"
    notebooks.opendatahub.io/last-image-selection: "s2i-generic-data-science-notebook:2025.1"
    opendatahub.io/hardware-profile-namespace: ""
    notebooks.opendatahub.io/last-size-selection: "Medium"
    opendatahub.io/username: "mouachan"
    opendatahub.io/hardware-profile-name: ""
    opendatahub.io/workbench-image-namespace: ""
spec:
  template:
    spec:
      initContainers:
        - name: init-workbench
          image: 'image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2025.1'
          command: ["/bin/bash"]
          args:
            - -c
            - |
              echo "üöÄ Initialisation du workbench..."
              cd /opt/app-root/src
              
              # Cloner le repository
              git clone -b main https://github.com/mouachan/openshift-ai-setup.git /tmp/openshift-ai-setup
              
              # Copier la d√©mo Triton
              cp -r /tmp/openshift-ai-setup/demos/triton-example ./triton-example
              
              # Cr√©er les dossiers n√©cessaires
              mkdir -p ./triton-example/data
              mkdir -p ./triton-example/models
              mkdir -p ./triton-example/notebooks
              
              # Copier les mod√®les pr√©-entra√Æn√©s s'ils existent
              if [ -d "/tmp/openshift-ai-setup/demos/triton-example/models" ]; then
                cp -r /tmp/openshift-ai-setup/demos/triton-example/models/* ./triton-example/models/ 2>/dev/null || true
              fi
              
              # Cr√©er un fichier de test pour S3
              echo "Test S3 connection" > ./triton-example/data/test_s3.txt
              echo "Dataset Iris sera charg√© depuis scikit-learn" > ./triton-example/data/README.txt
              
              # Nettoyer
              rm -rf /tmp/openshift-ai-setup
              
              # Permissions
              chmod -R 755 ./triton-example
              
              echo "‚úÖ Workbench initialis√© avec succ√®s!"
              echo "üìÅ Contenu du r√©pertoire:"
              ls -la ./triton-example/
          volumeMounts:
            - mountPath: /opt/app-root/src/
              name: triton-workbench-storage
      containers:
        - resources:
            limits:
              cpu: '6'
              memory: 24Gi
            requests:
              cpu: '3'
              memory: 24Gi
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /notebook/triton-demo/triton-workbench/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: triton-workbench
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /notebook/triton-demo/triton-workbench/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          env:
            - name: NOTEBOOK_ARGS
              value: |-
                --ServerApp.port=8888
                --ServerApp.token=''
                --ServerApp.password=''
                --ServerApp.base_url=/notebook/triton-demo/triton-workbench
                --ServerApp.quit_button=False
                --ServerApp.tornado_settings={"user":"mouachan","hub_host":"https://rhods-dashboard-redhat-ods-applications.apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com","hub_prefix":"/projects/triton-demo"}
            - name: JUPYTER_IMAGE
              value: 'image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2025.1'
            - name: PIP_CERT
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: REQUESTS_CA_BUNDLE
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: SSL_CERT_FILE
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: PIPELINES_SSL_SA_CERTS
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: GIT_SSL_CAINFO
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            # Configuration Elyra pour les pipelines
            - name: ELYRA_ENABLE_SCRIPT_EXECUTION
              value: "True"
            - name: ELYRA_METADATA_STORE_CLASS
              value: "elyra.metadata.file.FileMetadataStore"
            - name: ELYRA_RUNTIME_ENV
              value: "kubeflow_pipelines"
            # Configuration Kubeflow
            - name: KF_PIPELINES_ENDPOINT
              value: "https://ds-pipeline-triton-demo-pipelines-triton-demo.apps.cluster.local"
            - name: KF_PIPELINES_UI_ENDPOINT
              value: "https://ds-pipeline-ui-triton-demo-pipelines-triton-demo.apps.cluster.local"
            # Configuration Model Registry - URL correcte
            - name: MODEL_REGISTRY_URL
              value: "https://modelregistry-rest.apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com"
            - name: MODEL_REGISTRY_DATABASE_URL
              value: "mysql://mlmduser:TheBlurstOfTimes@mysql.db-ai.svc.cluster.local:3306/model_registry"
            # Configuration S3/MinIO externe
            - name: AWS_ACCESS_KEY_ID
              value: "accesskey"
            - name: AWS_SECRET_ACCESS_KEY
              value: "secretkey"
            - name: AWS_S3_ENDPOINT
              value: "minio.db-ai.svc.cluster.local:9000"
            - name: AWS_S3_BUCKET
              value: "model-registry"
            - name: AWS_S3_FORCE_PATH_STYLE
              value: "true"
            # Configuration Git pour charger le projet
            - name: GIT_REPO
              value: "https://github.com/mouachan/openshift-ai-setup.git"
            - name: GIT_BRANCH
              value: "main"
            - name: GIT_PATH
              value: "demos/triton-example"
          envFrom:
            - secretRef:
                name: triton-demo-s3-connection
          ports:
            - containerPort: 8888
              name: notebook-port
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /opt/app-root/src/
              name: triton-workbench-storage
            - mountPath: /dev/shm
              name: shm
            - mountPath: /etc/pki/tls/custom-certs/ca-bundle.crt
              name: trusted-ca
              readOnly: true
              subPath: ca-bundle.crt
            - mountPath: /opt/app-root/pipeline-runtimes/
              name: runtime-images
            # Montage de la data connection S3
            - mountPath: /opt/app-root/src/data
              name: s3-connection
              readOnly: false
            - mountPath: /opt/app-root/elyra-config
              name: elyra-runtime-config
              readOnly: true
          image: 'image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2025.1'
          workingDir: /opt/app-root/src
          command:
          - /bin/bash
          - -c
          args:
          - |
            # Installation des packages suppl√©mentaires pour la d√©mo Triton
            echo "üì¶ Installation des packages requis..."
            pip install --quiet --no-cache-dir \
              tritonclient[http]>=2.30.0 \
              scikit-learn>=1.3.0 \
              tensorflow>=2.13.0 \
              pandas>=2.0.0 \
              numpy>=1.24.0 \
              matplotlib>=3.7.0 \
              seaborn>=0.12.0 \
              requests>=2.31.0 \
              boto3>=1.28.0 \
              minio>=7.1.0 \
              pyyaml>=6.0 \
              click>=8.1.0 \
              kfp>=2.0.0 \
              kfp-kubernetes>=1.0.0 \
              model-registry>=0.1.0
            
            echo "‚úÖ Packages install√©s avec succ√®s"
            
            # Configuration Elyra sans interaction
            echo "üîß Configuration Elyra..."
            mkdir -p /opt/app-root/src/.jupyter
            mkdir -p /opt/app-root/src/.local/share/jupyter/metadata/runtimes/kfp
            
            # Copier la configuration Elyra depuis le ConfigMap
            if [ -f "/opt/app-root/elyra-config/jupyter_elyra_config.py" ]; then
              cp /opt/app-root/elyra-config/jupyter_elyra_config.py /opt/app-root/src/.jupyter/
            else
              echo "c.ElyraApp.enable_pipeline_editing = True" > /opt/app-root/src/.jupyter/jupyter_elyra_config.py
              echo "c.ElyraApp.runtime_env = 'kubeflow_pipelines'" >> /opt/app-root/src/.jupyter/jupyter_elyra_config.py
            fi
            
            # Ex√©cuter le script d'initialisation Elyra
            if [ -f "/opt/app-root/elyra-config/init-runtime.py" ]; then
              echo "üöÄ Ex√©cution du script d'initialisation Elyra..."
              python3 /opt/app-root/elyra-config/init-runtime.py
            else
              echo "‚ö†Ô∏è Script d'initialisation Elyra non trouv√©"
            fi
            
            # D√©marrage de Jupyter
            start-notebook.sh ${NOTEBOOK_ARGS}
        - resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 100m
              memory: 64Mi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: oauth-proxy
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 8443
              name: oauth-proxy
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /etc/oauth/client
              name: oauth-client
            - mountPath: /etc/oauth/config
              name: oauth-config
            - mountPath: /etc/tls/private
              name: tls-certificates
          image: 'registry.redhat.io/openshift4/ose-oauth-proxy@sha256:4f8d66597feeb32bb18699326029f9a71a5aca4a57679d636b876377c2e95695'
          args:
            - '--provider=openshift'
            - '--https-address=:8443'
            - '--http-address='
            - '--openshift-service-account=triton-workbench'
            - '--cookie-secret-file=/etc/oauth/config/cookie_secret'
            - '--cookie-expire=24h0m0s'
            - '--tls-cert=/etc/tls/private/tls.crt'
            - '--tls-key=/etc/tls/private/tls.key'
            - '--upstream=http://localhost:8888'
            - '--upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
            - '--email-domain=*'
            - '--skip-provider-button'
            - '--client-id=triton-workbench-triton-demo-oauth-client'
            - '--client-secret-file=/etc/oauth/client/secret'
            - '--scope=user:info user:check-access'
            - '--openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"triton-workbench","namespace":"$(NAMESPACE)"}'
            - '--logout-url=https://rhods-dashboard-redhat-ods-applications.apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com/projects/triton-demo?notebookLogout=triton-workbench'
      enableServiceLinks: false
      serviceAccountName: triton-workbench
      volumes:
        - name: triton-workbench-storage
          persistentVolumeClaim:
            claimName: triton-workbench-pvc
        - emptyDir:
            medium: Memory
          name: shm
        - configMap:
            items:
              - key: ca-bundle.crt
                path: ca-bundle.crt
            name: workbench-trusted-ca-bundle
            optional: true
          name: trusted-ca
        - configMap:
            name: pipeline-runtime-images
            optional: true
          name: runtime-images
        - name: oauth-config
          secret:
            defaultMode: 420
            secretName: triton-workbench-oauth-config
        - name: oauth-client
          secret:
            defaultMode: 420
            secretName: triton-workbench-oauth-client
        - name: tls-certificates
          secret:
            defaultMode: 420
            secretName: triton-workbench-tls
        # Volume pour la data connection S3
        - name: s3-connection
          emptyDir: {}
        # Volume pour la configuration Elyra
        - name: elyra-runtime-config
          configMap:
            name: elyra-runtime-config
