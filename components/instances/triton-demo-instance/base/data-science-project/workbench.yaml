apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  name: triton-workbench
  namespace: triton-demo
  labels:
    app: triton-workbench
    opendatahub.io/dashboard: "true"
    opendatahub.io/odh-managed: "true"
    opendatahub.io/user: mouachan
  annotations:
    notebooks.opendatahub.io/inject-oauth: "true"
    opendatahub.io/image-display-name: "Triton Demo Notebook"
    notebooks.opendatahub.io/oauth-logout-url: "/projects/triton-demo?notebookLogout=triton-workbench"
    opendatahub.io/accelerator-name: ""
    openshift.io/description: "Workbench Jupyter pour d√©veloppement avec image standard RHOAI"
    openshift.io/display-name: "Triton Demo - Standard RHOAI Workbench"
    notebooks.opendatahub.io/last-image-selection: "s2i-generic-data-science-notebook:2025.1"
    notebooks.opendatahub.io/last-image-version-git-commit-selection: "840a528"
    notebooks.opendatahub.io/last-size-selection: "Medium"
    opendatahub.io/username: "mouachan"
    opendatahub.io/hardware-profile-name: ""
    opendatahub.io/workbench-image-namespace: "redhat-ods-applications"
spec:
  template:
    spec:
      containers:
        - resources:
            limits:
              cpu: '6'
              memory: 24Gi
            requests:
              cpu: '3'
              memory: 24Gi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /notebook/triton-demo/triton-workbench/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: triton-workbench
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /notebook/triton-demo/triton-workbench/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: NOTEBOOK_ARGS
              value: |-
                --ServerApp.port=8888
                --ServerApp.token=''
                --ServerApp.password=''
                --ServerApp.base_url=/notebook/triton-demo/triton-workbench
                --ServerApp.quit_button=False
                --ServerApp.tornado_settings={"user":"mouachan","hub_host":"https://rhods-dashboard-redhat-ods-applications.apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com","hub_prefix":"/projects/triton-demo"}
            - name: REQUESTS_CA_BUNDLE
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: SSL_CERT_FILE
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: PIPELINES_SSL_SA_CERTS
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: GIT_SSL_CAINFO
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: PIP_CERT
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            # Configuration Elyra pour les pipelines
            - name: ELYRA_ENABLE_SCRIPT_EXECUTION
              value: "True"
            - name: ELYRA_METADATA_STORE_CLASS
              value: "elyra.metadata.file.FileMetadataStore"
            - name: ELYRA_RUNTIME_ENV
              value: "kubeflow_pipelines"
            # Configuration TLS pour Elyra (accepter les certificats auto-sign√©s d'OpenShift)
            - name: ELYRA_PIPELINE_RUNTIME_VERIFY_SSL
              value: "false"
            - name: KFP_VERIFY_SSL
              value: "false"
            # Configuration Git pour charger le projet
            - name: GIT_REPO
              value: "https://github.com/mouachan/openshift-ai-setup.git"
            - name: GIT_BRANCH
              value: "main"
            - name: GIT_PATH
              value: "demos/triton-example"
          envFrom:
            - secretRef:
                name: triton-demo-s3-connection
            - secretRef:
                name: triton-demo-model-registry-credentials
          ports:
            - containerPort: 8888
              name: notebook-port
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /opt/app-root/src/
              name: triton-workbench-storage
            - mountPath: /dev/shm
              name: shm
            - mountPath: /opt/app-root/runtimes
              name: elyra-dsp-details
            - mountPath: /etc/pki/tls/custom-certs/ca-bundle.crt
              name: trusted-ca
              readOnly: true
              subPath: ca-bundle.crt
            # Montage de la data connection S3
            - mountPath: /opt/app-root/src/data
              name: s3-connection
              readOnly: false
            # Volume mount pour le cache pip (persistant)
            - mountPath: /opt/app-root/src/.pip-cache
              name: pip-cache
              readOnly: false
          image: 'image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2025.1'
          workingDir: /opt/app-root/src
          command:
          - /bin/bash
          - -c
          args:
          - |
            # Script de d√©marrage simple
            echo "üöÄ D√©marrage Triton Demo Notebook (Standard RHOAI)"
            echo "üì¶ Utilisation de l'image standard qui fonctionne"
            
            # Configuration des certificats CA pour Python
            echo "üîê Configuration des certificats CA..."
            export REQUESTS_CA_BUNDLE=/etc/pki/tls/custom-certs/ca-bundle.crt
            export SSL_CERT_FILE=/etc/pki/tls/custom-certs/ca-bundle.crt
            export PIPELINES_SSL_SA_CERTS=/etc/pki/tls/custom-certs/ca-bundle.crt
            
            # D√©sactiver la v√©rification SSL pour les connexions internes
            echo "‚ö†Ô∏è D√©sactivation de la v√©rification SSL pour les connexions internes..."
            export PYTHONHTTPSVERIFY=0
            export REQUESTS_VERIFY=false
            
            # Clonage du repository si configur√©
            if [ -n "${GIT_REPO}" ] && [ -n "${GIT_PATH}" ]; then
              echo "üìÇ Clonage du repository..."
              if [ ! -d ".git" ]; then
                git clone "${GIT_REPO}" temp_repo 2>/dev/null || echo "‚ö†Ô∏è Clonage √©chou√©"
                if [ -d "temp_repo/${GIT_PATH}" ]; then
                  cp -r temp_repo/${GIT_PATH}/* . 2>/dev/null || echo "‚ö†Ô∏è Copie √©chou√©e"
                  rm -rf temp_repo
                fi
              fi
            fi
            
            echo "‚úÖ Configuration termin√©e!"
            echo "üöÄ D√©marrage de Jupyter Lab..."
            
            # D√©marrage direct de Jupyter (tous les packages sont pr√©-install√©s)
            exec start-notebook.sh ${NOTEBOOK_ARGS}
        - resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 100m
              memory: 64Mi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: oauth-proxy
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 8443
              name: oauth-proxy
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /etc/oauth/client
              name: oauth-client
            - mountPath: /etc/oauth/config
              name: oauth-config
            - mountPath: /etc/tls/private
              name: tls-certificates
          image: 'registry.redhat.io/openshift4/ose-oauth-proxy@sha256:4f8d66597feeb32bb18699326029f9a71a5aca4a57679d636b876377c2e95695'
          args:
            - '--provider=openshift'
            - '--https-address=:8443'
            - '--http-address='
            - '--openshift-service-account=triton-workbench'
            - '--cookie-secret-file=/etc/oauth/config/cookie_secret'
            - '--cookie-expire=24h0m0s'
            - '--tls-cert=/etc/tls/private/tls.crt'
            - '--tls-key=/etc/tls/private/tls.key'
            - '--upstream=http://localhost:8888'
            - '--upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
            - '--email-domain=*'
            - '--skip-provider-button'
            - '--client-id=triton-workbench-triton-demo-oauth-client'
            - '--client-secret-file=/etc/oauth/client/secret'
            - '--scope=user:info user:check-access'
            - '--openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"triton-workbench","namespace":"$(NAMESPACE)"}'
            - '--logout-url=/projects/triton-demo?notebookLogout=triton-workbench'
      enableServiceLinks: false
      serviceAccountName: triton-workbench-sa
      volumes:
        - name: triton-workbench-storage
          persistentVolumeClaim:
            claimName: triton-workbench-pvc
        - emptyDir:
            medium: Memory
          name: shm
        # Volume pour les certificats CA (optionnel)
        - name: trusted-ca
          emptyDir: {}
        - name: oauth-config
          secret:
            defaultMode: 420
            secretName: triton-workbench-oauth-config
        - name: oauth-client
          secret:
            defaultMode: 420
            secretName: triton-workbench-oauth-client
        - name: tls-certificates
          secret:
            defaultMode: 420
            secretName: triton-workbench-tls
        # Volume pour la data connection S3
        - name: s3-connection
          emptyDir: {}
        # Volume persistant pour le cache pip
        - name: pip-cache
          persistentVolumeClaim:
            claimName: triton-workbench-pip-cache
