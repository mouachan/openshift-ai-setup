#!/usr/bin/env python3
"""
Script pour corriger la configuration d'authentification Elyra
√Ä ex√©cuter dans le notebook workbench si les pipelines ne fonctionnent pas
"""

import os
import json
import sys
from pathlib import Path

def setup_elyra_auth():
    """Configure l'authentification Elyra pour Data Science Pipelines"""
    print("üîß Configuration de l'authentification Elyra...")
    
    # Configuration
    NAMESPACE = "triton-demo"
    CLUSTER_DOMAIN = "apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com"
    ELYRA_METADATA_DIR = os.path.expanduser("~/.local/share/jupyter/metadata")
    
    # Cr√©er les r√©pertoires n√©cessaires
    dirs = [
        f"{ELYRA_METADATA_DIR}/runtimes",
        f"{ELYRA_METADATA_DIR}/component-catalogs",
        f"{ELYRA_METADATA_DIR}/code-snippets",
    ]
    
    for dir_path in dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"‚úì R√©pertoire cr√©√©: {dir_path}")
    
    # Configuration du runtime avec authentification correcte
    runtime_config = {
        "display_name": "Data Science Pipelines (Fixed Auth)",
        "metadata": {
            "api_endpoint": f"https://ds-pipeline-{NAMESPACE}-pipelines-{NAMESPACE}.{CLUSTER_DOMAIN}",
            "api_username": "",
            "api_password": "",
            "cos_endpoint": "http://minio-api.minio.svc:9000",
            "cos_username": "minioadmin",
            "cos_password": "minioadmin",
            "cos_bucket": "triton-data",
            "cos_directory": "",
            "tags": ["kubeflow", "pipelines", "openshift", "fixed"],
            "engine": "Argo",
            "auth_type": "KUBERNETES_SERVICE_ACCOUNT_TOKEN",
            "runtime_type": "KUBEFLOW_PIPELINES",
            "api_version": "v1",
            "user_namespace": NAMESPACE,
            "engine_namespace": NAMESPACE,
            "cos_secure": False,
            "disable_ssl_verification": False,
            "cos_auth_type": "USER_CREDENTIALS"
        },
        "schema_name": "kfp",
        "name": "data_science_pipelines_fixed"
    }
    
    # Sauvegarder la configuration
    runtime_file = f"{ELYRA_METADATA_DIR}/runtimes/data_science_pipelines_fixed.json"
    
    try:
        with open(runtime_file, 'w') as f:
            json.dump(runtime_config, f, indent=2)
        print(f"‚úÖ Configuration sauvegard√©e: {runtime_file}")
        
        # Afficher le r√©sum√©
        print("\nüìã Configuration du runtime:")
        print(f"   üìõ Nom: {runtime_config['display_name']}")
        print(f"   üîó Endpoint: {runtime_config['metadata']['api_endpoint']}")
        print(f"   üîê Auth: {runtime_config['metadata']['auth_type']}")
        print(f"   üì¶ Bucket: {runtime_config['metadata']['cos_bucket']}")
        print(f"   üè∑Ô∏è Namespace: {runtime_config['metadata']['user_namespace']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")
        return False

def verify_auth_setup():
    """V√©rifie que l'authentification est correctement configur√©e"""
    print("\nüîç V√©rification de l'authentification...")
    
    # V√©rifier le token
    token_path = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    if os.path.exists(token_path):
        print("‚úÖ Token de service account trouv√©")
        try:
            with open(token_path, 'r') as f:
                token = f.read().strip()
                print(f"‚úÖ Token valide (longueur: {len(token)} caract√®res)")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lecture token: {e}")
    else:
        print("‚ùå Token de service account manquant")
        return False
    
    # V√©rifier le namespace
    namespace_path = "/var/run/secrets/kubernetes.io/serviceaccount/namespace"
    if os.path.exists(namespace_path):
        try:
            with open(namespace_path, 'r') as f:
                namespace = f.read().strip()
                print(f"‚úÖ Namespace: {namespace}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lecture namespace: {e}")
    
    return True

def test_kfp_connection():
    """Test la connexion KFP avec la nouvelle configuration"""
    print("\nüß™ Test de connexion KFP...")
    
    try:
        import kfp
        
        # Configuration
        NAMESPACE = "triton-demo"
        CLUSTER_DOMAIN = "apps.cluster-v2mx6.v2mx6.sandbox1062.opentlc.com"
        api_endpoint = f"https://ds-pipeline-{NAMESPACE}-pipelines-{NAMESPACE}.{CLUSTER_DOMAIN}"
        
        # Lire le token
        token_path = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        with open(token_path, 'r') as f:
            token = f.read().strip()
        
        # Cr√©er le client
        client = kfp.Client(
            host=api_endpoint,
            existing_token=token,
            namespace=NAMESPACE
        )
        
        # Test
        experiments = client.list_experiments(namespace=NAMESPACE, page_size=1)
        print("‚úÖ Connexion KFP r√©ussie!")
        print(f"üìä Client op√©rationnel pour: {api_endpoint}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur KFP: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Script de correction de l'authentification Elyra")
    print("=" * 55)
    
    # √âtape 1: Configurer Elyra
    if not setup_elyra_auth():
        print("‚ùå √âchec de la configuration Elyra")
        return 1
    
    # √âtape 2: V√©rifier l'authentification
    if not verify_auth_setup():
        print("‚ùå Probl√®me d'authentification")
        return 1
    
    # √âtape 3: Tester la connexion
    if test_kfp_connection():
        print("\n‚úÖ Configuration r√©ussie!")
        print("üéâ Vous pouvez maintenant utiliser les pipelines dans Elyra")
        print("üìù Utilisez le runtime 'Data Science Pipelines (Fixed Auth)'")
    else:
        print("\n‚ö†Ô∏è Configuration Elyra OK mais connexion KFP √©chou√©e")
        print("üîß V√©rifiez les permissions RBAC et le d√©ploiement des pipelines")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())