# üöÄ OpenShift AI Setup - Makefile
# 
# Commandes utiles pour g√©rer le projet OpenShift AI

.PHONY: help install clean verify status logs backup restore

# Variables
CLUSTER_DOMAIN ?= $(shell oc get ingresses.config.openshift.io cluster -o jsonpath='{.spec.domain}' 2>/dev/null || echo "cluster.local")
NAMESPACE ?= triton-demo

# Couleurs pour l'affichage
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
RED := \033[0;31m
NC := \033[0m # No Color

# Aide par d√©faut
help: ## Afficher cette aide
	@echo "$(BLUE)üöÄ OpenShift AI Setup - Commandes disponibles$(NC)"
	@echo ""
	@echo "$(YELLOW)Installation et d√©ploiement:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Exemples:$(NC)"
	@echo "  make install          # Installation compl√®te"
	@echo "  make status           # V√©rifier l'√©tat du cluster"
	@echo "  make logs             # Afficher les logs"
	@echo "  make clean            # Nettoyer le cluster"

# Installation compl√®te
install: ## Installation compl√®te d'OpenShift AI
	@echo "$(BLUE)üöÄ Installation compl√®te d'OpenShift AI...$(NC)"
	@./install.sh

# Installation des op√©rateurs uniquement
operators: ## Installer uniquement les op√©rateurs
	@echo "$(BLUE)üì¶ Installation des op√©rateurs...$(NC)"
	@oc apply -k components/operators/

# Installation de l'infrastructure
infrastructure: ## Installer l'infrastructure de base
	@echo "$(BLUE)üèóÔ∏è  Installation de l'infrastructure...$(NC)"
	@oc apply -k components/instances/minio-instance/base/
	@oc apply -k components/instances/rhoai-instance/components/model-registry/
	@oc apply -k components/instances/rhoai-instance/components/custom-serving-runtimes/
	@oc apply -k components/instances/pipelines-instance/base/
	@oc apply -k components/instances/service-mesh-instance/base/ || echo "$(YELLOW)‚ö†Ô∏è  Service Mesh d√©j√† install√©$(NC)"
	@oc apply -k components/instances/serverless-instance/base/

# Installation du workbench
workbench: ## Installer le workbench personnalis√©
	@echo "$(BLUE)üñ•Ô∏è  Installation du workbench...$(NC)"
	@oc apply -k components/instances/triton-demo-instance/base/data-science-project/
	@echo "$(YELLOW)‚è≥ Attente que le workbench d√©marre...$(NC)"
	@oc wait --for=condition=Ready pod -l app=triton-workbench -n $(NAMESPACE) --timeout=300s
	@echo "$(BLUE)üîß Configuration d'Elyra...$(NC)"
	@oc apply -f components/instances/triton-demo-instance/base/data-science-project/elyra-runtime-config.yaml
	@oc exec triton-workbench-0 -n $(NAMESPACE) -c triton-workbench -- python3 /opt/app-root/elyra-config/init-runtime.py

# Configuration GitOps
gitops: ## Configurer GitOps avec ArgoCD
	@echo "$(BLUE)üîÑ Configuration GitOps...$(NC)"
	@oc apply -k argocd-apps/

# V√©rification de l'√©tat
status: ## V√©rifier l'√©tat du cluster
	@echo "$(BLUE)üìä √âtat du cluster OpenShift AI$(NC)"
	@echo ""
	@echo "$(YELLOW)üîç Workbench:$(NC)"
	@oc get pods -n $(NAMESPACE) -l app=triton-workbench 2>/dev/null || echo "$(RED)‚ùå Namespace $(NAMESPACE) non trouv√©$(NC)"
	@echo ""
	@echo "$(YELLOW)üóÑÔ∏è  MinIO:$(NC)"
	@oc get pods -n minio 2>/dev/null || echo "$(RED)‚ùå Namespace minio non trouv√©$(NC)"
	@echo ""
	@echo "$(YELLOW)üì¶ Model Registry:$(NC)"
	@oc get pods -n rhoai-model-registries 2>/dev/null || echo "$(RED)‚ùå Namespace rhoai-model-registries non trouv√©$(NC)"
	@echo ""
	@echo "$(YELLOW)üîß Pipelines:$(NC)"
	@oc get datasciencepipelinesapplications -A 2>/dev/null || echo "$(RED)‚ùå Aucun pipeline trouv√©$(NC)"
	@echo ""
	@echo "$(YELLOW)üñºÔ∏è  Images personnalis√©es:$(NC)"
	@oc get imagestreams -n redhat-ods-applications | grep triton 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Aucune image Triton trouv√©e$(NC)"

# Logs des composants
logs: ## Afficher les logs des composants
	@echo "$(BLUE)üìã Logs des composants$(NC)"
	@echo ""
	@echo "$(YELLOW)üì± Workbench:$(NC)"
	@oc logs triton-workbench-0 -n $(NAMESPACE) -c triton-workbench --tail=20 2>/dev/null || echo "$(RED)‚ùå Workbench non disponible$(NC)"
	@echo ""
	@echo "$(YELLOW)üóÑÔ∏è  MinIO:$(NC)"
	@oc logs -n minio -l app=minio --tail=10 2>/dev/null || echo "$(RED)‚ùå MinIO non disponible$(NC)"

# V√©rification de la connectivit√©
verify: ## V√©rifier la connectivit√© des services
	@echo "$(BLUE)üîç V√©rification de la connectivit√©$(NC)"
	@echo ""
	@echo "$(YELLOW)üîó Test des pipelines:$(NC)"
	@curl -s -o /dev/null -w "Pipelines: %{http_code}\n" "https://ds-pipeline-dspa-test-pipeline.apps.$(CLUSTER_DOMAIN)/api/v1/healthz" --insecure 2>/dev/null || echo "$(RED)‚ùå Pipelines non accessibles$(NC)"
	@echo ""
	@echo "$(YELLOW)üîó Test MinIO:$(NC)"
	@curl -s -o /dev/null -w "MinIO: %{http_code}\n" "https://minio-api-minio.apps.$(CLUSTER_DOMAIN)/health/live" --insecure 2>/dev/null || echo "$(RED)‚ùå MinIO non accessible$(NC)"

# Sauvegarde de la configuration
backup: ## Sauvegarder la configuration actuelle
	@echo "$(BLUE)üíæ Sauvegarde de la configuration...$(NC)"
	@mkdir -p backups/$(shell date +%Y%m%d-%H%M%S)
	@oc get all -n $(NAMESPACE) -o yaml > backups/$(shell date +%Y%m%d-%H%M%S)/$(NAMESPACE)-backup.yaml
	@oc get all -n minio -o yaml > backups/$(shell date +%Y%m%d-%H%M%S)/minio-backup.yaml
	@oc get all -n rhoai-model-registries -o yaml > backups/$(shell date +%Y%m%d-%H%M%S)/model-registry-backup.yaml
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans backups/$(shell date +%Y%m%d-%H%M%S)/$(NC)"

# Restauration de la configuration
restore: ## Restaurer une configuration sauvegard√©e
	@echo "$(YELLOW)‚ö†Ô∏è  Sp√©cifiez le dossier de sauvegarde: make restore BACKUP_DIR=backups/YYYYMMDD-HHMMSS$(NC)"
	@if [ -z "$(BACKUP_DIR)" ]; then \
		echo "$(RED)‚ùå BACKUP_DIR non sp√©cifi√©$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üîÑ Restauration depuis $(BACKUP_DIR)...$(NC)"
	@oc apply -f $(BACKUP_DIR)/$(NAMESPACE)-backup.yaml
	@oc apply -f $(BACKUP_DIR)/minio-backup.yaml
	@oc apply -f $(BACKUP_DIR)/model-registry-backup.yaml
	@echo "$(GREEN)‚úÖ Restauration termin√©e$(NC)"

# Nettoyage du cluster
clean: ## Nettoyer le cluster (supprimer tous les composants)
	@echo "$(RED)‚ö†Ô∏è  ATTENTION: Cette action va supprimer tous les composants !$(NC)"
	@read -p "√ätes-vous s√ªr ? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@echo "$(BLUE)üßπ Nettoyage du cluster...$(NC)"
	@oc delete -k components/instances/triton-demo-instance/base/data-science-project/ --ignore-not-found
	@oc delete -k components/instances/minio-instance/base/ --ignore-not-found
	@oc delete -k components/instances/rhoai-instance/components/model-registry/ --ignore-not-found
	@oc delete -k components/instances/rhoai-instance/components/custom-serving-runtimes/ --ignore-not-found
	@oc delete -k components/instances/pipelines-instance/base/ --ignore-not-found
	@oc delete -k components/instances/service-mesh-instance/base/ --ignore-not-found
	@oc delete -k components/instances/serverless-instance/base/ --ignore-not-found
	@oc delete -k argocd-apps/ --ignore-not-found
	@echo "$(GREEN)‚úÖ Cluster nettoy√©$(NC)"

# Nettoyage partiel (workbench uniquement)
clean-workbench: ## Nettoyer uniquement le workbench
	@echo "$(BLUE)üßπ Nettoyage du workbench...$(NC)"
	@oc delete -k components/instances/triton-demo-instance/base/data-science-project/ --ignore-not-found
	@echo "$(GREEN)‚úÖ Workbench nettoy√©$(NC)"

# Red√©marrage du workbench
restart-workbench: ## Red√©marrer le workbench
	@echo "$(BLUE)üîÑ Red√©marrage du workbench...$(NC)"
	@oc delete notebook triton-workbench -n $(NAMESPACE) --ignore-not-found
	@oc apply -k components/instances/triton-demo-instance/base/data-science-project/
	@echo "$(YELLOW)‚è≥ Attente que le workbench red√©marre...$(NC)"
	@oc wait --for=condition=Ready pod -l app=triton-workbench -n $(NAMESPACE) --timeout=300s
	@echo "$(BLUE)üîß Reconfiguration d'Elyra...$(NC)"
	@oc exec triton-workbench-0 -n $(NAMESPACE) -c triton-workbench -- python3 /opt/app-root/elyra-config/init-runtime.py
	@echo "$(GREEN)‚úÖ Workbench red√©marr√©$(NC)"

# Mise √† jour de la configuration
update: ## Mettre √† jour la configuration
	@echo "$(BLUE)üîÑ Mise √† jour de la configuration...$(NC)"
	@oc apply -k components/instances/triton-demo-instance/base/data-science-project/
	@oc apply -k components/instances/minio-instance/base/
	@oc apply -k components/instances/rhoai-instance/components/model-registry/
	@oc apply -k components/instances/rhoai-instance/components/custom-serving-runtimes/
	@echo "$(GREEN)‚úÖ Configuration mise √† jour$(NC)"

# Test des fonctionnalit√©s
test: ## Tester les fonctionnalit√©s principales
	@echo "$(BLUE)üß™ Tests des fonctionnalit√©s...$(NC)"
	@echo "$(YELLOW)üì± Test du workbench:$(NC)"
	@oc get pods -n $(NAMESPACE) -l app=triton-workbench | grep -q "Running" && echo "$(GREEN)‚úÖ Workbench fonctionnel$(NC)" || echo "$(RED)‚ùå Workbench non fonctionnel$(NC)"
	@echo "$(YELLOW)üóÑÔ∏è  Test de MinIO:$(NC)"
	@oc get pods -n minio | grep -q "Running" && echo "$(GREEN)‚úÖ MinIO fonctionnel$(NC)" || echo "$(RED)‚ùå MinIO non fonctionnel$(NC)"
	@echo "$(YELLOW)üîß Test des pipelines:$(NC)"
	@oc get datasciencepipelinesapplications -A | grep -q "dspa" && echo "$(GREEN)‚úÖ Pipelines disponibles$(NC)" || echo "$(RED)‚ùå Pipelines non disponibles$(NC)"

# Affichage des informations de connexion
info: ## Afficher les informations de connexion
	@echo "$(BLUE)üîó Informations de connexion$(NC)"
	@echo ""
	@echo "$(YELLOW)üì± Workbench:$(NC)"
	@WORKBENCH_ROUTE=$$(oc get route triton-workbench -n $(NAMESPACE) -o jsonpath='{.spec.host}' 2>/dev/null || echo "En cours de cr√©ation"); \
	echo "  https://$$WORKBENCH_ROUTE"
	@echo ""
	@echo "$(YELLOW)üóÑÔ∏è  MinIO:$(NC)"
	@MINIO_ROUTE=$$(oc get route minio-api -n minio -o jsonpath='{.spec.host}' 2>/dev/null || echo "En cours de cr√©ation"); \
	echo "  API: https://$$MINIO_ROUTE"
	@MINIO_CONSOLE_ROUTE=$$(oc get route minio-console -n minio -o jsonpath='{.spec.host}' 2>/dev/null || echo "En cours de cr√©ation"); \
	echo "  Console: https://$$MINIO_CONSOLE_ROUTE"
	@echo ""
	@echo "$(YELLOW)üìö Documentation:$(NC)"
	@echo "  README.md - Guide complet"
	@echo "  docs/QUICK-START.md - D√©marrage rapide"
	@echo "  docs/MODULAR-ARCHITECTURE.md - Architecture"

# Validation de la configuration
validate: ## Valider la configuration YAML
	@echo "$(BLUE)‚úÖ Validation de la configuration...$(NC)"
	@for file in $$(find components/ -name "*.yaml" -o -name "*.yml"); do \
		echo "Validating $$file..."; \
		oc apply --dry-run=client -f $$file > /dev/null 2>&1 && echo "$(GREEN)‚úÖ $$file$(NC)" || echo "$(RED)‚ùå $$file$(NC)"; \
	done
	@for file in $$(find argocd-apps/ -name "*.yaml" -o -name "*.yml"); do \
		echo "Validating $$file..."; \
		oc apply --dry-run=client -f $$file > /dev/null 2>&1 && echo "$(GREEN)‚úÖ $$file$(NC)" || echo "$(RED)‚ùå $$file$(NC)"; \
	done

# D√©faut
.DEFAULT_GOAL := help