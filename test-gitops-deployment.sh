#!/bin/bash
# Script de test et validation du d√©ploiement GitOps OpenShift AI
# Usage: ./test-gitops-deployment.sh

set -e

echo "üß™ TEST D√âPLOIEMENT GITOPS OPENSHIFT AI"
echo "======================================="
echo ""

# Fonction d'attente avec timeout
wait_for_condition() {
    local condition="$1"
    local description="$2"
    local timeout=300
    local elapsed=0
    
    echo "‚è≥ Attente: $description..."
    while [ $elapsed -lt $timeout ]; do
        if eval "$condition" >/dev/null 2>&1; then
            echo "‚úÖ $description - OK"
            return 0
        fi
        sleep 10
        elapsed=$((elapsed + 10))
        echo "   ... $elapsed/${timeout}s"
    done
    echo "‚ùå Timeout: $description"
    return 1
}

# Test 1: V√©rifier OpenShift GitOps
echo "üìã Test 1/7: OpenShift GitOps"
if oc get subscription openshift-gitops-operator -n openshift-operators >/dev/null 2>&1; then
    echo "‚úÖ Op√©rateur GitOps install√©"
    
    # Attendre que ArgoCD soit pr√™t
    wait_for_condition "oc get deployment argocd-server -n openshift-gitops | grep -q '1/1'" "ArgoCD Server ready"
    
    # Obtenir l'URL ArgoCD
    ARGOCD_URL=$(oc get route argocd-server -n openshift-gitops -o jsonpath='{.spec.host}' 2>/dev/null || echo "URL non disponible")
    echo "üåê ArgoCD URL: https://$ARGOCD_URL"
    
    # Obtenir le mot de passe admin
    ARGOCD_PASSWORD=$(oc get secret argocd-initial-admin-secret -n openshift-gitops -o jsonpath='{.data.password}' 2>/dev/null | base64 -d || echo "Password non disponible")
    echo "üîë Admin password: $ARGOCD_PASSWORD"
else
    echo "‚ùå Op√©rateur GitOps non install√©"
    echo "   Installer avec: oc apply -f components/operators/openshift-gitops-operator/base/subscription.yaml"
    exit 1
fi

# Test 2: V√©rifier l'Application ArgoCD
echo ""
echo "üìã Test 2/7: Application ArgoCD"
if oc get application openshift-ai-setup -n openshift-gitops >/dev/null 2>&1; then
    echo "‚úÖ Application ArgoCD trouv√©e"
    
    # V√©rifier le statut de sync
    SYNC_STATUS=$(oc get application openshift-ai-setup -n openshift-gitops -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "Unknown")
    HEALTH_STATUS=$(oc get application openshift-ai-setup -n openshift-gitops -o jsonpath='{.status.health.status}' 2>/dev/null || echo "Unknown")
    
    echo "üîÑ Sync Status: $SYNC_STATUS"
    echo "üíö Health Status: $HEALTH_STATUS"
    
    if [ "$SYNC_STATUS" = "Synced" ]; then
        echo "‚úÖ Application synchronis√©e"
    else
        echo "‚ö†Ô∏è Application pas encore synchronis√©e"
        echo "   Forcer sync: oc patch application openshift-ai-setup -n openshift-gitops --type merge -p '{\"operation\":{\"initiatedBy\":{\"username\":\"admin\"},\"sync\":{\"revision\":\"main\"}}}'"
    fi
else
    echo "‚ùå Application ArgoCD non trouv√©e"
    echo "   Installer avec: oc apply -f argocd/openshift-ai-application-public.yaml"
    exit 1
fi

# Test 3: V√©rifier OpenShift AI
echo ""
echo "üìã Test 3/7: OpenShift AI Core"
wait_for_condition "oc get subscription rhods-operator -n openshift-operators" "Subscription RHOAI"

if oc get dsci,dsc >/dev/null 2>&1; then
    echo "‚úÖ OpenShift AI install√©"
    
    # V√©rifier DSCI
    DSCI_PHASE=$(oc get dsci -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "Unknown")
    echo "üéØ DSCI Phase: $DSCI_PHASE"
    
    # V√©rifier DSC
    DSC_PHASE=$(oc get dsc -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "Unknown")
    echo "üéØ DSC Phase: $DSC_PHASE"
    
    if [ "$DSC_PHASE" = "Ready" ]; then
        echo "‚úÖ OpenShift AI Ready"
    else
        echo "‚è≥ OpenShift AI en cours d'installation..."
    fi
else
    echo "‚ùå OpenShift AI non install√©"
fi

# Test 4: V√©rifier les namespaces
echo ""
echo "üìã Test 4/7: Namespaces OpenShift AI"
EXPECTED_NS=("redhat-ods-applications" "redhat-ods-monitoring" "redhat-ods-operator")
for ns in "${EXPECTED_NS[@]}"; do
    if oc get namespace "$ns" >/dev/null 2>&1; then
        echo "‚úÖ Namespace $ns"
    else
        echo "‚ùå Namespace $ns manquant"
    fi
done

# Test 5: V√©rifier Minio
echo ""
echo "üìã Test 5/7: Minio S3 Storage"
if oc get namespace minio >/dev/null 2>&1; then
    echo "‚úÖ Namespace Minio"
    
    # V√©rifier les pods Minio
    MINIO_PODS=$(oc get pods -n minio --no-headers 2>/dev/null | wc -l || echo "0")
    echo "üì¶ Minio pods: $MINIO_PODS"
    
    if [ "$MINIO_PODS" -gt 0 ]; then
        # V√©rifier l'URL Minio
        MINIO_URL=$(oc get route minio-ui -n minio -o jsonpath='{.spec.host}' 2>/dev/null || echo "URL non disponible")
        echo "üåê Minio URL: https://$MINIO_URL"
    fi
else
    echo "‚ùå Namespace Minio manquant"
fi

# Test 6: V√©rifier Model Registry
echo ""
echo "üìã Test 6/7: Model Registry"
if oc get pods -n model-registry >/dev/null 2>&1; then
    REGISTRY_PODS=$(oc get pods -n model-registry --no-headers 2>/dev/null | wc -l || echo "0")
    echo "‚úÖ Model Registry pods: $REGISTRY_PODS"
else
    echo "‚ö†Ô∏è Model Registry pas encore d√©ploy√©"
fi

# Test 7: V√©rifier les routes principales
echo ""
echo "üìã Test 7/7: Routes et acc√®s"
echo "üåê URLs principales:"

# RHOAI Dashboard
RHOAI_URL=$(oc get route rhods-dashboard -n redhat-ods-applications -o jsonpath='{.spec.host}' 2>/dev/null || echo "En cours...")
echo "   OpenShift AI: https://$RHOAI_URL"

# ArgoCD
echo "   ArgoCD: https://$ARGOCD_URL"

# Minio
if [ "$MINIO_URL" != "URL non disponible" ]; then
    echo "   Minio: https://$MINIO_URL"
fi

# Test de connectivit√©
echo ""
echo "üîó Test de connectivit√©:"
if command -v curl >/dev/null 2>&1; then
    if [ "$RHOAI_URL" != "En cours..." ]; then
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://$RHOAI_URL" || echo "000")
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "302" ] || [ "$HTTP_STATUS" = "301" ]; then
            echo "‚úÖ OpenShift AI accessible (HTTP $HTTP_STATUS)"
        else
            echo "‚ö†Ô∏è OpenShift AI pas encore accessible (HTTP $HTTP_STATUS)"
        fi
    fi
else
    echo "‚ö†Ô∏è curl non disponible pour test connectivit√©"
fi

# R√©sum√© final
echo ""
echo "üìä R√âSUM√â DU D√âPLOIEMENT"
echo "======================="
echo "GitOps Operator: ‚úÖ"
echo "ArgoCD Application: $([ "$SYNC_STATUS" = "Synced" ] && echo "‚úÖ" || echo "‚è≥")"
echo "OpenShift AI: $([ "$DSC_PHASE" = "Ready" ] && echo "‚úÖ" || echo "‚è≥")"
echo "Minio Storage: $([ "$MINIO_PODS" -gt 0 ] && echo "‚úÖ" || echo "‚è≥")"

echo ""
echo "üéØ PROCHAINES √âTAPES:"
if [ "$DSC_PHASE" = "Ready" ]; then
    echo "‚úÖ D√©ploiement termin√© ! Acc√©dez √† OpenShift AI:"
    echo "   https://$RHOAI_URL"
else
    echo "‚è≥ D√©ploiement en cours... R√©ex√©cuter ce script dans 5-10 minutes"
    echo "   ou surveiller dans ArgoCD: https://$ARGOCD_URL"
fi

echo ""
echo "üìö Documentation:"
echo "   - Guide: INSTALL-PUBLIC-REPO.md"
echo "   - ArgoCD UI: admin / $ARGOCD_PASSWORD"
